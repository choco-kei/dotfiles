snippet var_dump
abbr var_dump()
    var_dump(${1})

snippet zend_log_debug
abbr getLog()->debug()
    \GlobalVar::getLog()->debug(__CLASS__.'::'.__FUNCTION__.' ['.__LINE__.'] '.${1});

snippet zend_log_notice
abbr getLog()->notice()
    \GlobalVar::getLog()->notice(__CLASS__.'::'.__FUNCTION__.' ['.__LINE__.'] '.${1});

snippet zend_log_error
abbr getLog()->error()
    \GlobalVar::getLog()->error(__CLASS__.'::'.__FUNCTION__.' ['.__LINE__.'] '.${1});

snippet zend_log_crit
abbr getLog()->crit()
    \GlobalVar::getLog()->crit(__CLASS__.'::'.__FUNCTION__.' ['.__LINE__.'] '.${1});

snippet zend_db_data_methods
abbr Db_Data_
    /**
     * 配列形式にして返す
     * @return 変換した配列
     */
    public function toArray()
    {
        $ret = parent::toArray();
        return $ret;
    }

    /**
     * 配列形式を設定する
     */
    public function fromArray($x)
    {
        parent::fromArray($x);
    }

    /**
     * selectしてきたデータを設定する
     * @param array セレクトした結果
     */
    public function setRow($x)
    {
        parent::setRow($x);
    }

snippet zend_select_row
abbr zend_select_row
    $table  = new ${1:DAO}($db);
    $select = $table->select()->from($table)
        ->where(${2:DAO::COLUMN}.' = ?', ${3:param});

    $row = $table->fetchRow($select);
    if (!is_null($row)) {
        $result = new ${4:DATA}();
        $result->setRow($row);
    }

snippet zend_select_all
abbr zend_select_all
    $table  = new ${1:DAO}($db);
    $select = $table->select()->from($table)
        ->where(${2:DAO::COLUMN}.' = ?', ${3:param});

    $rows = $table->fetchAll($select);
    if (!empty($rows)) {
        foreach ($rows as $row) {
            $rObj = new ${4:DATA}();
            $rObj->setRow($row);
            $result[] = $rObj;
        }
    }

snippet zend_insert
abbr zend_insert
    // インサートするデータ
    $insertData = array(
        ${1:DAO::COLUMN} => ${2:param},
        ${3:DAO::COLUMN} => new Zend_Db_Expr('${4:param}')
    );

    // インサート実行
    $table  = new ${5:DAO}($db);
    $result = $table->insert($insertData);

snippet zend_update
abbr zend_update

    $table  = new ${1:DAO}($db);
    // アップデート実行
    $update = $table->update(
        array(
            // SET
            ${2:DAO::COLUMN} => ${3:param},
            ${4:DAO::COLUMN} => new Zend_Db_Expr('${5:param}')
        ),
        array(
            // WHERE
            $table->getAdapter()->quoteInto(${6:DAO::COLUMN}.' = ?', ${7:param})
        )
    );

    // 結果取得
    $result = $update;

